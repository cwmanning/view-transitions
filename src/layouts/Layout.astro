---
import '~/assets/styles/tailwind.css';

import { I18N } from '~/utils/config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import Metadata from '~/components/common/Metadata.astro';

import type { MetaData as MetaDataType } from '~/types';

export interface Props {
  metadata?: MetaDataType;
}

const { metadata = {} } = Astro.props;
const { language, textDirection } = I18N;

const slides = await Astro.glob('../content/slide/*.md*');
const slideNames = slides.map((slide) => {
  const idx = slide.file.indexOf('/slide/');
  return slide.file.substring(idx + 7, idx + 9);
});
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[20px]" transition:animate="fade">
  <head>
    <CommonMeta />
    <!-- <ViewTransitions /> -->
    <meta name="view-transition" content="same-origin" />
    <Favicons />
    <CustomStyles />
    <ApplyColorMode />
    <Metadata {...metadata} />
  </head>

  <body class="antialiased text-default bg-page tracking-tight">
    <slot />

    <nav class="hidden">
      {
        slideNames.map((name) => {
          return <a href={`/slides/${name}`}>{name}</a>;
        })
      }
    </nav>

    <script is:inline define:vars={{ slideNames }}>
      if (window.location.pathname.indexOf('/slides/') === -1) {
        return;
      }

      let slides = [];

      function setSlides() {
        slides = slideNames.map((path) => {
          const link = `/slides/${path}`;
          return {
            link,
            isCurrentLink: link === window.location.pathname,
          };
        });
      }

      function getCurrentLink() {
        return slides.findIndex((slide) => slide.isCurrentLink === true);
      }

      function navigateToSlide(link) {
        // anchors must be in the DOM for the astro (framework specific, SPA version)
        // view transitions to work as expected
        document.querySelector(`a[href="${link}"]`).click();
      }

      function previousSlide() {
        const currentLinkIndex = getCurrentLink();
        const prev = slides[currentLinkIndex - 1];
        prev && navigateToSlide(prev.link);
      }

      function nextSlide() {
        const currentLinkIndex = getCurrentLink();
        const next = slides[currentLinkIndex + 1];
        next && navigateToSlide(next.link);
      }

      function addListeners() {
        document.addEventListener('keydown', (event) => {
          if (event.code === 'ArrowLeft') {
            event.preventDefault();
            previousSlide();
          } else if (event.code === 'ArrowRight') {
            event.preventDefault();
            nextSlide();
          }
        });
      }

      addListeners();
      setSlides();
    </script>

    <style is:global>
      img {
        content-visibility: auto;
      }
    </style>
  </body>
</html>
